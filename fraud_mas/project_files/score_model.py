from sklearn.externals.joblib import load
from numpy import array

file_name = 'forest_model.sav'
loaded_model = load(file_name)


def exec_model_scoring(order_id,
                       gender,
                       title,
                       given_name,
                       middle_initial,
                       surname,
                       street_address,
                       city,
                       state,
                       zipcode,
                       country,
                       country_full,
                       email_address,
                       username,
                       telephone_number,
                       mothers_maiden,
                       birthday,
                       CC_type,
                       cvv2,
                       cc_expiration,
                       national_id,
                       color,
                       occupation,
                       ref_domain,
                       guid,
                       latitude,
                       longitude,
                       total_session_length,
                       pageview_pre_purchase_visits,
                       time_on_cart,
                       product_view_count,
                       total_visit_clicks,
                       customer_credit_selection,
                       payment_type,
                       plan_type,
                       existing_ecom_customer):
    """Output: order_id,
                gender,
                title,
                given_name,
                middle_initial,
                surname,
                street_address,
                city,
                state,
                zipcode,
                country,
                country_full,
                email_address,
                username,
                telephone_number,
                mothers_maiden,
                birthday,
                CC_type,
                cvv2,
                cc_expiration,
                national_id,
                color,
                occupation,
                ref_domain,
                guid,
                latitude,
                longitude,
                total_session_length,
                pageview_pre_purchase_visits,
                time_on_cart,
                product_view_count,
                total_visit_clicks,
                customer_credit_selection,
                payment_type,
                plan_type,
                existing_ecom_customer,
                model_score""";
    model_score = float(score_model(total_session_length,
                                    pageview_pre_purchase_visits,
                                    time_on_cart,
                                    product_view_count,
                                    total_visit_clicks))
    return (order_id,
            gender,
            title,
            given_name,
            middle_initial,
            surname,
            street_address,
            city,
            state,
            zipcode,
            country,
            country_full,
            email_address,
            username,
            telephone_number,
            mothers_maiden,
            birthday,
            CC_type,
            cvv2,
            cc_expiration,
            national_id,
            color,
            occupation,
            ref_domain,
            guid,
            latitude,
            longitude,
            total_session_length,
            pageview_pre_purchase_visits,
            time_on_cart,
            product_view_count,
            total_visit_clicks,
            customer_credit_selection,
            payment_type,
            plan_type,
            existing_ecom_customer,
            model_score
            )


def score_model(total_session_length,
                pageview_pre_purchase_visits,
                time_on_cart,
                product_view_count,
                total_visit_clicks):
    X = array([total_session_length,
               pageview_pre_purchase_visits,
               time_on_cart,
               product_view_count,
               total_visit_clicks])
    score = loaded_model.predict(X.reshape(1, -1))
    return score[0]
